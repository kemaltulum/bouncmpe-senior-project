{"version":3,"sources":["context/auth-context.js","pages/Auth.js","components/Modal/Modal.js","components/Backdrop/Backdrop.js","components/Spinner/Spinner.js","components/Projects/ProjectList/ProjectItem/ProjectItem.js","components/Projects/ProjectList/ProjectList.js","pages/Projects.js","components/Stories/StoryList/StoryItem/StoryItem.js","components/Stories/StoryList/StoryList.js","pages/Story.js","components/Navigation/MainNavigation.js","App.js","serviceWorker.js","index.js"],"names":["React","createContext","token","userId","login","tokenExpiration","logout","AuthPage","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isLogin","switchModeHandler","setState","prevState","submitHandler","event","preventDefault","email","emailEl","current","value","password","passwordEl","trim","length","requestBody","query","variables","fetch","method","body","JSON","stringify","headers","Content-Type","then","res","status","Error","json","resData","data","context","catch","err","console","log","createRef","react_default","a","createElement","className","onSubmit","htmlFor","type","id","ref","onClick","Component","contextType","AuthContext","modal","title","children","canCancel","onCancel","canConfirm","onConfirm","confirmText","backdrop","spinner","projectItem","key","projectId","name","react_router_dom","to","projectList","projects","map","project","ProjectItem_ProjectItem","_id","description","onAddStory","ProjectsPage","creating","isLoading","isActive","startCreateEventHandler","modalConfirmHandler","nameElRef","descriptionElRef","desc","Authorization","updatedProjects","toConsumableArray","push","createProject","creator","modalCancelHandler","fetchProjects","_this2","Fragment","selectedEvent","Backdrop_Backdrop","Modal_Modal","rows","Spinner_Spinner","ProjectList_ProjectList","addStoryHandler","storyItem","fullText","actor","action","benefit","storyList","stories","story","StoryItem_StoryItem","storyId","full_text","isParsed","is_parsed","StoryPage","modelOpened","modalType","startAddStoryHandlerSingle","modalOpened","startAddStoryHandlerRaw","storyElRef","id_user","idUserElRef","project_id","match","params","rawText","rawTextElRef","objectSpread","addStory","fetchStories","StoryList_StoryList","mainNavigation","auth_context","Consumer","App","Provider","Navigation_MainNavigation","react_router","from","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.617d604b.chunk.js","sourcesContent":["import React from 'react';\n\nexport default React.createContext({\n    token: null,\n    userId: null,\n    login: (token, userId, tokenExpiration) => {},\n    logout: () => {}\n});","import React, { Component } from 'react';\n\nimport './Auth.css';\nimport AuthContext from '../context/auth-context';\n\nclass AuthPage extends Component {\n    state = {\n        isLogin: true\n    };\n\n    static contextType = AuthContext;\n\n    constructor(props) {\n        super(props);\n        this.emailEl = React.createRef();\n        this.passwordEl = React.createRef();\n    }\n\n    switchModeHandler = () => {\n        this.setState(prevState => {\n            return { isLogin: !prevState.isLogin };\n        });\n    };\n\n    submitHandler = event => {\n        event.preventDefault();\n        const email = this.emailEl.current.value;\n        const password = this.passwordEl.current.value;\n\n        if (email.trim().length === 0 || password.trim().length === 0) {\n            return;\n        }\n\n        let requestBody = {\n            query: `\n        query Login($email: String!, $password: String!) {\n          login(email: $email, password: $password) {\n            userId\n            token\n            tokenExpiration\n          }\n        }\n      `,\n            variables: {\n                email: email,\n                password: password\n            }\n        };\n\n        if (!this.state.isLogin) {\n            requestBody = {\n                query: `\n          mutation CreateUser($email: String!, $password: String!) {\n            createUser(userInput: {email: $email, password: $password}) {\n              _id\n              email\n            }\n          }\n        `,\n                variables: {\n                    email: email,\n                    password: password\n                }\n            };\n        }\n\n        fetch('http://localhost:8000/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n            .then(res => {\n                if (res.status !== 200 && res.status !== 201) {\n                    throw new Error('Failed!');\n                }\n                return res.json();\n            })\n            .then(resData => {\n                if (resData.data.login.token) {\n                    this.context.login(\n                        resData.data.login.token,\n                        resData.data.login.userId,\n                        resData.data.login.tokenExpiration\n                    );\n                }\n            })\n            .catch(err => {\n                console.log(err);\n            });\n    };\n\n    render() {\n        return (\n            <form className=\"auth-form\" onSubmit={this.submitHandler}>\n                <div className=\"form-control\">\n                    <label htmlFor=\"email\">E-Mail</label>\n                    <input type=\"email\" id=\"email\" ref={this.emailEl} />\n                </div>\n                <div className=\"form-control\">\n                    <label htmlFor=\"password\">Password</label>\n                    <input type=\"password\" id=\"password\" ref={this.passwordEl} />\n                </div>\n                <div className=\"form-actions\">\n                    <button type=\"submit\">{this.state.isLogin ? 'Login' : 'Sign Up'}</button>\n                    <button type=\"button\" onClick={this.switchModeHandler}>\n                        Switch to {this.state.isLogin ? 'Sign Up' : 'Login'}\n                    </button>\n                </div>\n            </form>\n        );\n    }\n}\n\nexport default AuthPage;\n","import React from 'react';\n\nimport './Modal.css';\n\nconst modal = props => (\n  <div className=\"modal\">\n    <header className=\"modal__header\">\n      <h1>{props.title}</h1>\n    </header>\n    <section className=\"modal__content\">{props.children}</section>\n    <section className=\"modal__actions\">\n      {props.canCancel && (\n        <button className=\"btn\" onClick={props.onCancel}>\n          Cancel\n        </button>\n      )}\n      {props.canConfirm && (\n        <button className=\"btn\" onClick={props.onConfirm}>\n          {props.confirmText}\n        </button>\n      )}\n    </section>\n  </div>\n);\n\nexport default modal;\n","import React from 'react';\n\nimport './Backdrop.css';\n\nconst backdrop = props => <div className=\"backdrop\"></div>;\n\nexport default backdrop;","import React from 'react';\n\nimport './Spinner.css';\n\nconst spinner = () => (\n  <div className=\"spinner\">\n    <div className=\"lds-dual-ring\" />\n  </div>\n);\n\nexport default spinner;\n","import React from 'react';\nimport { Link } from 'react-router-dom'; \n\nimport './ProjectItem.css';\n\nconst projectItem = props => (\n    <li key={props.projectId} className=\"projects__list-item\">\n        <div>\n            <h1>{props.name}</h1>\n        </div>\n        <div>\n            <Link className=\"btn\" to={props.projectId + \"/stories\"}>Stories</Link>\n        </div>\n    </li>\n);\n\nexport default projectItem;","import React from 'react';\n\nimport ProjectItem from './ProjectItem/ProjectItem';\nimport './ProjectList.css';\n\nconst projectList = props => {\n    const projects = props.projects.map(project => {\n        return (\n            <ProjectItem \n                key={project._id}\n                projectId={project._id}\n                name={project.name}\n                description={project.description}\n                onAddStory={props.onAddStory}\n            />\n        );\n    });\n\n    return <ul className=\"projects__list\">{projects}</ul>;\n};\n\nexport default projectList;","import React, { Component } from 'react';\n\nimport Modal from '../components/Modal/Modal';\nimport Backdrop from '../components/Backdrop/Backdrop';\nimport Spinner from '../components/Spinner/Spinner';\nimport ProjectList from '../components/Projects/ProjectList/ProjectList';\n\nimport AuthContext from '../context/auth-context';\nimport './Projects.css';\n\nclass ProjectsPage extends Component {\n    state = {\n        creating: false,\n        projects: [],\n        isLoading: false\n    };\n    isActive = true;\n\n    static contextType = AuthContext;\n\n    constructor(props) {\n        super(props);\n        this.nameElRef = React.createRef();\n        this.descriptionElRef = React.createRef();\n    }\n\n    componentDidMount() {\n        this.fetchProjects();\n    }\n\n    startCreateEventHandler = () => {\n        this.setState({ creating: true });\n    };\n\n    modalConfirmHandler = () => {\n        this.setState({ creating: false });\n        const name = this.nameElRef.current.value;\n        const description = this.descriptionElRef.current.value;\n\n        if (\n            name.trim().length === 0 ||\n            description.trim().length === 0\n        ) {\n            return;\n        }\n\n        const requestBody = {\n            query: `\n          mutation CreateProject($name: String!, $desc: String!) {\n            createProject(name: $name, description: $desc) {\n              _id\n              name\n              description\n            }\n          }\n        `,\n            variables: {\n                name: name,\n                desc: description\n            }\n        };\n\n        const token = this.context.token;\n\n        fetch('http://localhost:8000/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + token\n            }\n        })\n            .then(res => {\n                if (res.status !== 200 && res.status !== 201) {\n                    throw new Error('Failed!');\n                }\n                return res.json();\n            })\n            .then(resData => {\n                this.setState(prevState => {\n                    const updatedProjects = [...prevState.projects];\n                    updatedProjects.push({\n                        _id: resData.data.createProject._id,\n                        name: resData.data.createProject.name,\n                        description: resData.data.createProject.description,\n                        creator: {\n                            _id: this.context.userId\n                        }\n                    });\n                    return { projects: updatedProjects };\n                });\n            })\n            .catch(err => {\n                console.log(err);\n            });\n    };\n\n    modalCancelHandler = () => {\n        this.setState({ creating: false });\n    };\n\n    fetchProjects() {\n        this.setState({ isLoading: true });\n        const requestBody = {\n            query: `\n          query {\n            projects {\n              _id\n              name\n              description\n              creator {\n                _id\n                email\n              }\n            }\n          }\n        `\n        };\n\n        fetch('http://localhost:8000/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n            .then(res => {\n                if (res.status !== 200 && res.status !== 201) {\n                    throw new Error('Failed!');\n                }\n                return res.json();\n            })\n            .then(resData => {\n                const projects = resData.data.projects;\n                if (this.isActive) {\n                    this.setState({ projects: projects, isLoading: false });\n                }\n            })\n            .catch(err => {\n                console.log(err);\n                if (this.isActive) {\n                    this.setState({ isLoading: false });\n                }\n            });\n    }\n\n    addStoryHandler(projectId) {\n        console.log(projectId, \"add story\");\n    }\n\n    componentWillUnmount() {\n        this.isActive = false;\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                {(this.state.creating || this.state.selectedEvent) && <Backdrop />}\n                {this.state.creating && (\n                    <Modal\n                        title=\"Add Project\"\n                        canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.modalConfirmHandler}\n                        confirmText=\"Confirm\"\n                    >\n                        <form>\n                            <div className=\"form-control\">\n                                <label htmlFor=\"name\">Name</label>\n                                <input type=\"text\" id=\"name\" ref={this.nameElRef} />\n                            </div>\n                            <div className=\"form-control\">\n                                <label htmlFor=\"description\">Description</label>\n                                <textarea\n                                    id=\"description\"\n                                    rows=\"4\"\n                                    ref={this.descriptionElRef}\n                                />\n                            </div>\n                        </form>\n                    </Modal>\n                )}\n                {this.context.token && (\n                    <div className=\"events-control\">\n                        <p>Add your project!</p>\n                        <button className=\"btn\" onClick={this.startCreateEventHandler}>\n                            Create Project\n            </button>\n                    </div>\n                )}\n                {this.state.isLoading ? (\n                    <Spinner />\n                ) : (\n                     <ProjectList \n                        projects={this.state.projects}\n                        onAddStory={this.addStoryHandler}\n                     />  \n                    )}\n            </React.Fragment>\n        );\n    }\n}\n\nexport default ProjectsPage;\n","import React from 'react';\n\nimport './StoryItem.css';\n\nconst storyItem = props => (\n    <li key={props.projectId} className=\"projects__list-item\">\n        <div>\n            <p>{props.fullText}</p>\n        </div>\n        <div>\n            <p><strong>Actor:</strong> {props.actor}</p>\n            <p><strong>Action:</strong> {props.action}</p>\n            <p><strong>Benefit:</strong> {props.benefit}</p>\n        </div>\n    </li>\n);\n\nexport default storyItem;","import React from 'react';\n\nimport StoryItem from './StoryItem/StoryItem';\nimport './StoryList.css';\n\nconst storyList = props => {\n    const stories = props.stories.map(story => {\n        return (\n            <StoryItem \n                key={story._id}\n                storyId={story._id}\n                fullText={story.full_text}\n                actor={story.actor}\n                action={story.action}\n                benefit={story.benefit}\n                isParsed={story.is_parsed}\n            />\n        );\n    });\n\n    return <ul className=\"storys__list\">{stories}</ul>;\n};\n\nexport default storyList;","import React, { Component } from 'react';\n\nimport Backdrop from '../components/Backdrop/Backdrop';\nimport Modal from '../components/Modal/Modal';\nimport Spinner from '../components/Spinner/Spinner';\nimport StoryList from '../components/Stories/StoryList/StoryList';\n\nimport AuthContext from '../context/auth-context';\n\nimport './Story.css';\n\nclass StoryPage extends Component {\n    state = {\n        modelOpened: false,\n        modalType: 'single',\n        stories: [],\n        isLoading: false\n    }\n\n    static contextType = AuthContext;\n\n    constructor(props) {\n        super(props);\n        this.storyElRef = React.createRef();\n        this.idUserElRef = React.createRef();\n        this.rawTextElRef = React.createRef();\n    }\n\n    fetchStories() {\n        this.setState({isLoading: true});\n\n        const requestBody = {\n            query: `\n                    query getStories($project_id: String!) {\n                        stories(projectId: $project_id) {\n                        _id\n                        full_text\n                        actor\n                        action\n                        benefit\n                        is_parsed\n                        }\n                    }\n                    `,\n            variables: {\n                project_id: this.props.match.params.project_id\n            }\n        };\n\n        const token = this.context.token;\n\n        fetch('http://localhost:8000/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + token\n            }\n        })\n            .then(res => {\n                if (res.status !== 200 && res.status !== 201) {\n                    throw new Error('Failed!');\n                }\n                return res.json();\n            })\n            .then(resData => {\n                const stories = resData.data.stories;\n                this.setState({ stories: stories, isLoading: false });\n\n            })\n            .catch(err => {\n                console.log(err);\n                this.setState({ isLoading: false });\n            });\n    }\n\n    componentDidMount(){\n        console.log(this.props.match);\n        this.fetchStories();\n    }\n\n    startAddStoryHandlerSingle = () => {\n        this.setState({ modalOpened: true, modalType: 'single' });\n    }\n\n    startAddStoryHandlerRaw = () => {\n        this.setState({ modalOpened: true, modalType: 'raw' });\n    }\n\n    modalCancelHandler = () => {\n        this.setState({ modalOpened: false });\n    }\n\n    modalConfirmHandler = () => {\n\n        let requestBody;\n\n        if(this.state.modalType === 'single'){\n            const fullText = this.storyElRef.current.value;\n            const idUser = this.idUserElRef.current.value;\n\n\n            requestBody = {\n                query: `\n                    mutation addStory($full_text: String!, $id_user: String!, $project_id: String!) {\n                        addStory(storyInput : {full_text: $full_text, id_user: $id_user, project_id: $project_id}) {\n                        _id\n                        full_text\n                        actor\n                        action\n                        benefit\n                        is_parsed\n                        }\n                    }\n                    `,\n                variables: {\n                    full_text: fullText,\n                    id_user: idUser,\n                    project_id: this.props.match.params.project_id\n                }\n            };\n        } else if(this.state.modalType === 'raw'){\n            const rawText = this.rawTextElRef.current.value;\n            console.log(rawText);\n\n            requestBody = {\n                query: `\n                    mutation addStories($rawText: String!, $project_id: String!) {\n                        addStoryBulkRaw(rawText: $rawText, projectId: $project_id) {\n                        _id\n                        full_text\n                        actor\n                        action\n                        benefit\n                        is_parsed\n                        }\n                    }\n                    `,\n                variables: {\n                    rawText: rawText,\n                    project_id: this.props.match.params.project_id\n                }\n            };\n        }\n        \n\n        const token = this.context.token;\n\n        fetch('http://localhost:8000/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + token\n            }\n        })\n            .then(res => {\n                if (res.status !== 200 && res.status !== 201) {\n                    throw new Error('Failed!');\n                }\n                return res.json();\n            })\n            .then(resData => {\n               this.setState(prevState => {\n                   const stories = prevState.stories;\n                   stories.push({\n                       ...resData.data.addStory\n                   })\n                   return {stories: stories, modalOpened: false};\n               });\n            })\n            .catch(err => {\n                console.log(err);\n                this.setState({ modalOpened: false });\n            });\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                {(this.state.modalOpened && this.state.modalType === 'single') && <Backdrop />}\n                {this.state.modalOpened && (\n                    <Modal\n                        title=\"Add Story\"\n                        canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.modalConfirmHandler}\n                        confirmText=\"Add\"\n                    >\n                        <form>\n                            <div className=\"form-control\">\n                                <label htmlFor=\"story\">User Story</label>\n                                <input type=\"text\" id=\"story\" ref={this.storyElRef} />\n                            </div>\n                            <div className=\"form-control\">\n                                <label htmlFor=\"id_user\">Story ID</label>\n                                <input type=\"text\" id=\"id_user\" ref={this.idUserElRef} />\n                            </div>\n                        </form>\n                    </Modal>\n                )}\n                {(this.state.modalOpened && this.state.modalType === 'raw') && <Backdrop />}\n                {this.state.modalOpened && (\n                    <Modal\n                        title=\"Add Story Raw Text\"\n                        canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.modalConfirmHandler}\n                        confirmText=\"Add\"\n                    >\n                        <form>\n                            <div className=\"form-control\">\n                                <label htmlFor=\"story\">User Story</label>\n                                <textarea type=\"text\" id=\"story\" rows=\"10\" ref={this.rawTextElRef} />\n                            </div>\n                        </form>\n                    </Modal>\n                )}\n                {this.context.token && (\n                    <div className=\"stories-control\">\n                        <p>Add stories to your project!</p>\n                        <button className=\"btn\" onClick={this.startAddStoryHandlerSingle}>\n                            Add Story\n                        </button>\n                        <button className=\"btn\" onClick={this.startAddStoryHandlerRaw}>\n                            Add Story Raw\n                        </button>\n                    </div>\n                )}\n                \n                {this.state.isLoading ? (\n                    <Spinner />\n                ) : (\n                        <StoryList\n                            stories={this.state.stories}\n                        />\n                    )}\n                \n            </React.Fragment>\n        );\n    }\n}\n\nexport default StoryPage;","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nimport AuthContext from '../../context/auth-context';\nimport './MainNavigation.css';\n\nconst mainNavigation = props => (\n  <AuthContext.Consumer>\n    {context => {\n      return (\n        <header className=\"main-navigation\">\n          <div className=\"main-navigation__logo\">\n            <h1>AgileStory</h1>\n          </div>\n          <nav className=\"main-navigation__items\">\n            <ul>\n              {context.token && (\n                <React.Fragment>\n                  <li>\n                    <NavLink to=\"/projects\">Projects</NavLink>\n                  </li>\n                  <li>\n                    <button onClick={context.logout}>Logout</button>\n                  </li>\n                </React.Fragment>\n              )}\n            </ul>\n          </nav>\n        </header>\n      );\n    }}\n  </AuthContext.Consumer>\n);\n\nexport default mainNavigation;\n","import React, { Component } from 'react';\nimport { BrowserRouter, Route, Redirect, Switch } from 'react-router-dom';\n\nimport './App.css';\n\nimport AuthPage from './pages/Auth';\nimport ProjectsPage from './pages/Projects';\nimport StoryPage from './pages/Story';\nimport MainNavigation from './components/Navigation/MainNavigation';\n\nimport AuthContext from './context/auth-context';\n\nclass App extends Component {\n  state = {\n    token: null,\n    userId: null\n  };\n\n  login = (token, userId, tokenExpiration) => {\n    this.setState({ token: token, userId: userId });\n  };\n\n  logout = () => {\n    this.setState({ token: null, userId: null });\n  };\n\n  render() {\n    return (\n      <BrowserRouter>\n        <React.Fragment>\n          <AuthContext.Provider\n            value={{\n              token: this.state.token,\n              userId: this.state.userId,\n              login: this.login,\n              logout: this.logout\n            }}\n          >\n            <MainNavigation />\n            <main className=\"main-content\">\n              <Switch>\n                {this.state.token && <Redirect from=\"/\" to=\"/projects\" exact />}\n                {this.state.token && (\n                  <Redirect from=\"/auth\" to=\"/projects\" exact />\n                )}\n                {!this.state.token && (\n                  <Route path=\"/auth\" component={AuthPage} />\n                )}\n                {this.state.token && (\n                  <Route path=\"/:project_id/stories\" component={StoryPage} />\n                )}\n                {this.state.token && (\n                  <Route path=\"/projects\" component={ProjectsPage} />\n                )}\n                {!this.state.token && <Redirect to=\"/auth\" exact />}\n              </Switch>\n            </main>\n          </AuthContext.Provider>\n        </React.Fragment>\n      </BrowserRouter>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}